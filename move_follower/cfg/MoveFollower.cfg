#!/usr/bin/env python

PACKAGE = 'move_follower'

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, str_t, double_t, bool_t, int_t

gen = ParameterGenerator()

gen.add("base_global_planner", str_t, 0, "The name of the plugin for the global planner to use with move_base.", "navfn/NavfnROS")
gen.add("base_local_planner", str_t, 0, "The name of the plugin for the local planner to use with move_base.", "base_local_planner/TrajectoryPlannerROS")

#gen.add("recovery_behaviors", str_t, 0, "A list of recovery behavior plugins to use with move_base.", "[{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}]")

gen.add("planner_frequency", double_t, 0, "The rate in Hz at which to run the planning loop.", 0, 0, 100)
gen.add("controller_frequency", double_t, 0, "The rate in Hz at which to run the control loop and send velocity commands to the base.", 20, 0, 100)
gen.add("planner_patience", double_t, 0, "How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.", 5.0, 0, 100)
gen.add("controller_patience", double_t, 0, "How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.", 5.0, 0, 100)
gen.add("max_planning_retries", int_t, 0, "How many times we will recall the planner in an attempt to find a valid plan before space-clearing operations are performed", -1, -1, 1000)
gen.add("conservative_reset_dist", double_t, 0, "The distance away from the robot in meters at which obstacles will be cleared from the costmap when attempting to clear space in the map.", 3, 0, 50)

gen.add("recovery_behavior_enabled", bool_t, 0, "Whether or not to enable the move_base recovery behaviors to attempt to clear out space.", True)
# Doesnt exist
gen.add("clearing_rotation_allowed", bool_t, 0, "Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space.", True)
gen.add("shutdown_costmaps", bool_t, 0, "Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state", False)

gen.add("oscillation_timeout", double_t, 0, "How long in seconds to allow for oscillation before executing recovery behaviors.", 0.0, 0, 60)
gen.add("oscillation_distance", double_t, 0, "How far in meters the robot must move to be considered not to be oscillating.", 0.5, 0, 10)

gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration", False)


#wb
gen.add("turn_in_place_first", bool_t, 0, "turn_in_place_first.", False)
gen.add("max_vel_lin", double_t, 0, "max_vel_lin.", 0.9, 0, 100)
gen.add("max_vel_th", double_t, 0, "max_vel_th.", 1.4, 0, 100)
gen.add("min_vel_lin", double_t, 0, "min_vel_lin.", 0.1, 0, 100)
gen.add("min_vel_th", double_t, 0, "min_vel_th.", 0.0, 0, 100)
gen.add("max_vel_lin_acel", double_t, 0, "max_vel_lin_acel.", 0.9, 0, 100)
gen.add("max_vel_th_acel", double_t, 0, "max_vel_th_acel.", 0.9, 0, 100)
gen.add("max_vel_th_dacel", double_t, 0, "max_vel_th_dacel.", 0.9, 0, 100)
gen.add("max_vel_lin_dacel", double_t, 0, "max_vel_lin_dacel.", 0.9, 0, 100)
gen.add("goal_distance", double_t, 0, "How far in meters the robot followes the person.", 1.0, 0, 100)
gen.add("publish_twist_frequence", double_t, 0, "The frequence of publishing twist.", 50.0, 0, 100)
gen.add("accept_goal_frequence", double_t, 0, "The frequence of accepting twist.", 10.0, 0, 100)
gen.add("max_heading_diff_before_moving", double_t, 0, "max_heading_diff_before_moving.", 0.17, 0, 100)
gen.add("linear_scale_factor", double_t, 0, "linear scale factor .", 1.0, 0, 100)
gen.add("angular_scale_factor", double_t, 0, "angular scale factor .", 1.0, 0, 100)

exit(gen.generate(PACKAGE, "move_follower_node", "MoveFollower"))
